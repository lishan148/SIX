name: Fetch JSON and Forward to Multiple URLs Conditionally

on:
  schedule:
    - cron: "* * * * *"  # 每分钟执行一次
  workflow_dispatch:  # 手动触发
  push:  # 推送到 main 分支时触发
    branches:
      - main  # 仅当推送到 main 分支时触发

jobs:
  fetch_and_send:
    runs-on: ubuntu-latest
    name: Fetch and Send JSON Data Conditionally
    steps:

      # 1. 获取 API 响应数据
      - name: Fetch JSON from API
        id: fetch_json
        run: |
          # 获取 JSON 数据
          response=$(curl -s https://macaumarksix.com/api/live2)
          
          # 打印响应数据，调试用
          echo "Response: $response"
          
          # 如果响应为空，输出错误提示
          if [[ -z "$response" ]]; then
            echo "Error: Empty response from API"
            exit 1  # 终止工作流，防止后续错误
          fi

          # 解析所需字段
          key1=$(echo "$response" | jq -r '.[0].expect')      # 提取 expect 字段作为 key1
          key2=$(echo "$response" | jq -r '.[0].openCode')      # 提取 openCode 字段作为 key2
          key3=$(echo "$response" | jq -r '.[0].zodiac')        # 提取 zodiac 字段作为 key3
          key4=$(echo "$response" | jq -r '.[0].openTime')      # 提取 openTime 字段作为 key4
          key5=$(echo "$response" | jq -r '.[0].wave')          # 提取 wave 字段作为 key5
          
          # 打印提取的字段，调试用
          echo "key1 (expect): $key1"
          echo "key2 (openCode): $key2"
          echo "key3 (zodiac): $key3"
          echo "key4 (openTime): $key4"
          echo "key5 (wave): $key5"

          # 将字段存储为环境变量
          echo "KEY1=$key1" >> $GITHUB_ENV
          echo "KEY2=$key2" >> $GITHUB_ENV
          echo "KEY3=$key3" >> $GITHUB_ENV
          echo "KEY4=$key4" >> $GITHUB_ENV
          echo "KEY5=$key5" >> $GITHUB_ENV

      # 2. 判断 expect 是否改变，若改变则执行下一步
      - name: Compare expect and Send Bark Message
        run: |
          # 获取上一步保存的 key1 等值
          echo "Last key1 (expect): ${{ env.LAST_KEY1 }}"
          echo "Current key1 (expect): ${{ env.KEY1 }}"
          
          # 如果 key1 (expect) 改变，发送推送
          if [[ "${{ env.KEY1 }}" != "${{ env.LAST_KEY1 }}" ]]; then
            echo "expect has changed. Sending data to URL."

            # 发送请求的内容
            chinese_text="${{ env.KEY1 }}\r\n${{ env.KEY2 }}\r\n${{ env.KEY3 }}\r\n${{ env.KEY4 }}\r\n${{ env.KEY5 }}"

            # 使用 Python 进行 URL 编码（更稳定的编码方式）
            encoded_text=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$chinese_text'''))")        
                
            # 定义目标 URL 列表
            urls=("https://api.day.app/H9nYt9PJbr6LcBXYaiWPTU")
            # 循环发送请求到每个 URL
            for url in "${urls[@]}"
            do
              echo "Sending data to $url/$encoded_text"
              curl -s "$url/$encoded_text"
            done

            # 更新 LAST_KEY1 变量，确保下次与当前 KEY1 比较
            echo "LAST_KEY1=${{ env.KEY1 }}" >> $GITHUB_ENV
          else
            echo "expect has not changed. Skipping push."
          fi
