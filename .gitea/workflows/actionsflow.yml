name: Fetch JSON and Forward to Multiple URLs Conditionally

on:
  schedule:
    - cron: "* * * * *"  # 每分钟执行一次
  workflow_dispatch:  # 手动触发
  push:  # 推送到 main 分支时触发
    branches:
      - main  # 仅当推送到 main 分支时触发

jobs:
  fetch_and_send:
    runs-on: ubuntu-latest
    name: Fetch and Send JSON Data Conditionally
    steps:

      # 1. Checkout the repository (Ensure the repository is cloned)
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Restore Cache for Dependencies
      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: ${{ runner.os }}-cache-${{ hashFiles('**/*') }}
          restore-keys: |
            ${{ runner.os }}-cache-

      # 3. Install Required Tools (if necessary)
      - name: Install jq and curl
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      # 4. Install Python Dependencies
      - name: Set up Python and Install Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install requests

      # 5. Fetch API Response
      - name: Fetch JSON from API
        id: fetch_json
        run: |
          response=$(curl -s https://macaumarksix.com/api/live2)
          echo "Response: $response"
          if [[ -z "$response" ]]; then
            echo "Error: Empty response from API"
            exit 1
          fi
          key1=$(echo "$response" | jq -r '.[0].expect')
          key2=$(echo "$response" | jq -r '.[0].openCode')
          key3=$(echo "$response" | jq -r '.[0].zodiac')
          key4=$(echo "$response" | jq -r '.[0].openTime')
          key5=$(echo "$response" | jq -r '.[0].wave')
          echo "KEY1=$key1" >> $GITHUB_ENV
          echo "KEY2=$key2" >> $GITHUB_ENV
          echo "KEY3=$key3" >> $GITHUB_ENV
          echo "KEY4=$key4" >> $GITHUB_ENV
          echo "KEY5=$key5" >> $GITHUB_ENV

      # 6. Check for Changes in env_vars.json
      - name: Check if env_vars.json exists
        id: check_file
        run: |
          if [ -f env_vars.json ]; then
            last_key1=$(jq -r '.KEY1' env_vars.json)
            echo "LAST_KEY1=$last_key1" >> $GITHUB_ENV
          else
            echo "LAST_KEY1=" >> $GITHUB_ENV

      # 7. Commit Changes if Necessary
      - name: Commit and push changes if expect has changed
        if: ${{ env.LAST_KEY1 != env.KEY1 }}
        run: |
          echo "{\"KEY1\":\"${{ env.KEY1 }}\", \"KEY2\":\"${{ env.KEY2 }}\", \"KEY3\":\"${{ env.KEY3 }}\", \"KEY4\":\"${{ env.KEY4 }}\", \"KEY5\":\"${{ env.KEY5 }}\"}" > env_vars.json
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add env_vars.json
          git commit -m "Update env_vars.json with new KEY1: ${{ env.KEY1 }}"
          git push

      # 8. Send Notification if Data Changed
      - name: Compare expect and Send Bark Message
        if: ${{ env.LAST_KEY1 != env.KEY1 }}
        run: |
          message="${{ env.KEY1 }}\r\n${{ env.KEY2 }}\r\n${{ env.KEY3 }}\r\n${{ env.KEY4 }}\r\n${{ env.KEY5 }}"
          encoded_text=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$message'''))")
          urls=("https://api.day.app/H9nYt9PJbr6LcBXYaiWPTU")
          for url in "${urls[@]}"; do
            curl -s "$url/$encoded_text"
          done

      # 9. Save Cache for Future Runs
      - name: Save Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: ${{ runner.os }}-cache-${{ hashFiles('**/*') }}
